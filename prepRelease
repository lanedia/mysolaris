#!/net/den/usr/local/bin/perl -w
# $Id: prepRelease 56 2006-04-07 12:59:14Z johnma $
#
# Prepare code for release
#
# Written for Tecnomen Ireland Services Group
# by John Madden (John.Madden@tecnomen.com)
#
# Usage : prepRelease -r <release> -p <path to prepaid source>
#
# 1.7 24/09/2008 - Overhaul for new release procedures - Steve Jack
# 1.8 24/09/2008 - Minor bug fix - Steve Jack
# 1.9 07/01/2009 - Fix for naming adhoc builds
# 1.10 07/09/2015 - Added option to not update svn
# 1.11 29/01/2016 - Change SVN to GIT commands

BEGIN{push @INC, "/net/den/usr/local/lib/perl5/5.8.7"} use Getopt::Std;
use Term::ANSIColor;

$VERSION = '1.11';
my $git_root = "$ENV{HOME}/.builds/voice";

select(STDERR); $| = 1;
select(STDOUT); $| = 1;

@path = split("/", $0);
$self = $path[$#path];
my $passed_args = join(" ", @ARGV);
	print "checkdb args = $passed_args \n";

sub Usage() {
	print "\n";
	print "Usage $self\n";
	print "      -h : Show this help message\n";
	print "      -v : Print version and exit\n";
	print "      -l : Path to a logfile to use (default /tmp/prepRelease.pl)\n";
	print "      -r : Release label (eg. 4.3.7.0.c.510)\n";
	print "      -p : Path to the prepaid source\n";
	print "      -b : Base release - No check on upgrade script\n";
	print "      -d : Debug - will print diagnostics to screen\n";
	print "      -x : Do not commit version file\n";
	print "\n";
	print "-h and -v don't take an argument, and exit immediately.\n";
	print "\n";
	print "At least -r and -p are required for preparing a release.\n";
	print "\n";
	exit 0
}

sub Version() {
	print "\n";
	print "$self version $VERSION\n\n";
	print "Written by John Madden (John.Madden\@tecnomen.com)\n";
	print "For Tecnomen Ireland Services Group\n";
	print "\n";
	exit 0;
}

%options = ();

getopts( "utahvbdxr:p:l:", \%options );
# Added "u" for to check for upgrade script - only used when doing a binary release
Usage() if defined $options{h};
Version() if defined $options{v};
my $release = $options{r} if defined $options{r};
my $prepaid = $options{p} if defined $options{p};
my $base = $options{b} if defined $options{b};
my $debug = $options{d} if defined $options{d};
my $nocheckin = $options{x} if defined $options{x};
my $automation = $options{a} if defined $options{a};
my $generateTag = $options{t} if defined $options{t};
my $ignoreUpgrade = $options{u} if defined $options{u};
if( $options{l} ) {
	$log = $options{l};
	$user_supplied_log = 1;
} else {
	$log = "/tmp/prepRelease.log";
}

if ($automation) {
	my $file = $prepaid.'/control/rules/version.mak';

	# Open the version file for reading and writing.
	open FILE, "+<$file" or die "Couldn't open file: $!.\n";

	# Pull in all the lines of the file.
	my @lines = <FILE>;
	my $version;

	if($debug) {
		print "1st line of version.mak is =|$lines[0]\n";
	}
	if ( $lines[0] =~ m/PREPAID_VERSION="\\"+([^\\]+)/ ) {
		my $temp_rel = $1;
		$temp_rel =~ s/\.BLD\d+$//;
		$temp_rel =~ s/Prepaid_//;
#Need to remove .BLD-${gitversion) from version string
		$temp_rel =~ s/\.BLD-//;
		$temp_rel =~ s/\$\{gitversion\}//;
                $release = $temp_rel;
	}
	else {
		print color('bold red')."\nFatal error : ".color('reset')."PREPAID_VERSION not found in first line of $file\n";
		die "\n";
	}
	$passed_args = $passed_args . " -r " . $release;
	print "Updated checkdb args = $passed_args \n";
}
print "Release to make is - $release\n";
if ($release)
{
print "true\n";
}
else
{
print "false\n";
}
if ($prepaid)
{
print "$prepaid true\n";
}
else
{
print "$prepaid false\n";
}
if( (!$release) || (!$prepaid) ) {
	print "One is false\n";
	print "You must supply at least -r and -p and their arguments\n";
	print "Run $self -h for usage help\n\n";
	exit 1;
}

if ( $release =~ m/(.*)\.(.*)$/ ) {
    $first_part = $1;
    $last_part = $2;
}


if($debug) {
	print "first part is $first_part\n";
}
if($debug) {
	print "last part is $last_part\n";
}

if ( $last_part =~ m/BLD\d+$/ ) {
	print color('bold red')."\nFAILED : ".color('reset')."DO NOT include the BLD number in the tag\n         That will be generated by this script\n";
	print "         Consult the wiki and re-run this script.\n\n";
	die "\n";
}

my $HOME = $ENV{HOME};
my $PWD = $ENV{PWD};

if( !($prepaid =~ /^\//) && !($prepaid =~ /^~/) ) {
	if( ($prepaid =~ /^\./) && (!($prepaid =~ /^\.\./)) ) {
		$prepaid = $PWD;
	} elsif( -d $PWD."/".$prepaid ) {
		$prepaid = $PWD."/".$prepaid;
	} elsif( -d $HOME."/".$prepaid ) {
		$prepaid = $HOME."/".$prepaid;
	} else {
		print "Please supply the full path to the prepaid source\n";
		exit 1;
	}
}

if(!$base) {
        if ($debug) {
            $passed_args =  "-a -p $prepaid";
	}
    if ( $ignoreUpgrade ) {
         print color('bold green')."\nBinary release.Ignoring upgrade scripts.\n";
   }
    else
    {
        print "DEBUG calling check_db_upgrade $passed_args -c\n";
        if( system("$ENV{AUTOBUILDBASE}/packaging/Voice/check_db_upgrade $passed_args -c")) {
		print color('bold red')."\nFatal error : ".color('reset')."CheckUpgrade failed : $!\n\n";
		die "\n";
	}
        print "DEBUG returned from check_db_upgrade\n";
    }
}

###### STAGE 1 ######
# sanity check
##################### 

# Make sure user has updated version.mak file
print "\n\n";
print color('bold red')."*"x53;
print "\n";
print "*"x5;
print " NOTE - DO NOT update the version string   ";
print "*"x5;
print "\n";
print "*"x5;
print " in control/rules/version.mak              ";
print "*"x5;
print "\n";
print "*"x5;
print " This is now done via this script          ";
print "*"x5;
print "\n";
print "*"x5;
print " If you have updated version.mak abort now ";
print "*"x5;
print "\n";
print "*"x5;
print " and consult the wiki                      ";
print "*"x5;
print "\n";
print "*"x53;
print "\n".color('reset');
print "\n";
print "\n";
if ( $automation ) {
	$ans = 'y';
}
else {
	print " Do you want to continue? [y/n] ";
	$ans = <STDIN>;
}
if( !($ans =~ /^y/i) ) {
	print color('bold red')."\nUser ABORT : ".color('reset')."Consult the wiki and re-run this script.\n\n";
	die "\n";
}



if( !$user_supplied_log ) {
	if( -f "$log" ) {
		print "\n -o- Removing $log ... ";
		if( system("rm -f $log") ) {
			print "Failed\n";
			print color('bold red')."\nFatal error : ".color('reset')."Could not remove $log : $!\n\n";
			die "\n";
		}
		print "Success\n";
	}
}

print " -o- Opening $log ... ";
if( !defined(open(LOG, ">>", $log)) ) {
	print "Failed\n";
	print color('bold red')."\nFatal error : ".color('reset')."Could not open $log for writing : $!\n\n";
	die "\n";
}
print LOG $ENV{LOGNAME}." ".localtime()."\n";
print LOG "\nCOMMAND : chmod 666 $log\n";
if( system("chmod 666 $log >>$log 2>&1") ) {
	print LOG "\nERROR : Failed to chmod $log\n";
	print "Failed\n";
}
print "Success\n";
select(LOG); $| = 1;

select(STDOUT);



# Check for local modifications
print " -o- Checking for local modifications ... ";

print LOG "\nCOMMAND : cd $prepaid\n";
# Set working directory to local directory with GIT code. This will be the working
# directory in package.pl if it is a developer machine.
chdir $prepaid;
print LOG "\nCOMMAND : git status\n";
my $git_status = `git status`;

if ($git_status =~ /nothing to commit, working directory clean/ && $git_status =~ /Your branch is up-to-date with/) {
    print LOG "\nGIT status  - OK to continue!!\n";
    print "\nGIT status  - OK to continue!!\n"
} else {
    print LOG "\nFATAL : Working copy has local modifications\n";
    close(LOG);
    print color('bold red')."\nFatal error : ".color('reset')."You have local modifications. Tag not created.\n";
    die "\n";    
}

###### STAGE 2 #######
# Update version.mak
######################

if($debug) {
	print "Working copy is - $prepaid\n";
	print "Release is - $release\n";
}
my $file = $prepaid.'/control/rules/version.mak';

# Open the version file for reading and writing.
open FILE, "+<$file" or die "Couldn't open file: $!.\n";

# Pull in all the lines of the file.
my @lines = <FILE>;
my $version;

if($debug) {
	print "1st line of version.mak is =|$lines[0]\n";
}
##if ( $lines[0] =~ m/PREPAID_VERSION="\\"+([^\\]+)/ ) {
##
### Manually change version.make when creating a new base package or updates the patch identifier 
### For any other packages, version.mak will be updated automatically in the script
##    $version = $1;
##    if($debug) {
##	print "Version extracted from version.mak is $version\n";
##	print "Release to make is - $release\n";
##    }
##    if ($base) {
##        # Check base tag
##        if ($version !~ m/^Prepaid_\d+\.\d+\.\d+\.\w($|\.BLD\d+$)/){
##            print color('bold red')."\nFatal error : ".color('reset')."PREPAID_VERSION $version in version.mak not match a base tag\n";
##            die "\n";
##        }
##    } 
##    else {
##        # Check patch tag
##        if ($version !~ m/^Prepaid_\d+\.\d+\.\d+\.\w\.\d+/ ){
##            print color('bold red')."\nFatal error : ".color('reset')."PREPAID_VERSION $version in version.mak not match a patch tag\n";
##            die "\n";
##        }
##    }
##    
##    # Check BLD number
##    if ( $version =~ m/BLD\d+$/ ) {
##        $version =~ s/(\d+)$/$1 + 1/e;
##    } 
##    else {
##        $version .= '.BLD1';
##    }
##    if (-d $git_root) {
##        $lines[0] = qq(PREPAID_VERSION="\\"$version\\""\n);
##    }
##    if($debug) {
##        print "New version $version\n";
##    }
##
##}
##else {
##	print color('bold red')."\nFatal error : ".color('reset')."PREPAID_VERSION not found in first line of $file\n";
##	die "\n";
##}
$version = `git rev-parse --short HEAD`;

print LOG "\nCOMMAND : git tag\n";
my $git_tag = `git tag`;
#if ($generateTag) {
    if( !($git_tag =~ /$version/)) {
        # Tag does not exists so it is OK to create
        if ( $automation ) {
            $ans = 'y';
        }
        else {
            print color('bold blue')."\n\nYou are about to create tag - $version\n\n";
            print "OK to create ? [y/n]  ".color('reset');
            $ans = <STDIN>;
        }
        if( !($ans =~ /^y/i) ) {
            close FILE;
            print color('bold red')."\nUser ABORT : ".color('reset')."\n\n";
            die "\n";
        }
    }
    else{
	print LOG "\nFATAL : Prepaid tag $version already exists\n";
	close(LOG);
	close FILE;
	print "Failed\n";
	print color('bold red')."\nFatal error : ".color('reset')."Prepaid tag $version already exists. Delete it if you are creating the patch locally\n";
	die "\n";
    }
#} # generateTag
###### STAGE 3 #######
# tag prepaid
######################

# Rewrite the version file.
seek FILE, 0, 0;
truncate FILE, 0;

for my $line (@lines) {
    print FILE $line;
}
close FILE;

print "\n -o- Committing version.mak ... ";

# check in to branch
if ( -d $git_root){
    print LOG "\nCOMMAND : git commit -a -m 'Updating version to $version'\n";
    if(!$nocheckin) {
            if( system("git commit -a -m 'Updating version to $version' >>$log 2>&1") ) {
                    print LOG "\nFATAL : Failed committing version.mak\n";
                    close(LOG);
                    print "Failed\n";
                    print color('bold red')."\nFatal error : ".color('reset')."Failed to commit version.mak file\n";
                    die "\n";
            }
    }

    print "Success\n";

    print " -o- Updating working copy ... ";

    print LOG "\nCOMMAND : git push\n";
    if(!$nocheckin) {
            if( system("git push >>$log 2>&1") ) {
                    print LOG "\nFATAL : Failed pushing version.mak\n";
                    close(LOG);
                    print "Failed\n";
                    print color('bold red')."\nFatal error : ".color('reset')."ailed pushing version.mak\n";
                    die "\n";
            }
    }
    print "Success\n";
}
#if ($generateTag) {
    print " -o- Tagging prepaid ... ";

    print LOG "\nCOMMAND : git tag -a $version -m 'Tagging release $version'\n";
    if(!$nocheckin) {
        my $getvers_result = `python $ENV{AUTOBUILDBASE}/packaging/Voice/logCompilerTools.py Prepaid_$version`;
        chomp($getvers_result);
	if( system("git tag -a $version -m '$getvers_result' >>$log 2>&1") ) {
		print LOG "\nFATAL : Failied creating prepaid tag\n";
		close(LOG);
		print "Failed\n";
		print color('bold red')."\nFatal error : ".color('reset')."Failed to create prepaid tag.\n";
		die "\n";
	}
    }

    print "Success\n";

    if ( -d $git_root){
        print " -o- Pushing prepaid tag ... ";

        print LOG "\nCOMMAND : git push origin $version\n";
        if(!$nocheckin) {
            if( system("git push origin $version >>$log 2>&1 >>$log 2>&1") ) {
                    print LOG "\nFATAL : Failied pushing prepaid tag\n";
                    close(LOG);
                    print "Failed\n";
                    print color('bold red')."\nFatal error : ".color('reset')."Failed to push prepaid tag\n";
                    die "\n";
            }
        }
        print "Success\n";
    }
    else {
        print color('bold green')."\nTag created locally but not pushed. If you need to reproduce the patch delete the local tag.\n";
    }
    print color('bold blue')."\n\nTag - $version - has been created \n\n";
    print color('green')."\n ********* TAGGING COMPLETED OK *********\n\n";
#} #generateTag
###### STAGE 4 #######
# Package build
######################

my $pb_path = $ENV{HOME}."/Build_$version";
my $pb_tag  = $version;

$pb_tag =~ s/Prepaid_//g;


if($debug) {
	print "pb_path is $pb_path\n";
	print "pb_tag is $pb_tag\n";
}

if ( $automation ) {
    print "DEBUG - run package.pl -a -v $pb_tag";
    if ( $base ) {
        if( system("/net/den/usr/perl5.8.8/bin/perl $ENV{AUTOBUILDBASE}/packaging/Voice/package.pl -a -v $pb_tag") ) {
            print LOG "\nFATAL : Failed creating base package\n";
            close(LOG);
            print "Failed\n";
            print color('bold red')."\nFatal error : ".color('reset')."Failed creating base package. Please remove the GIT tag $pb_tag manually from GITLAB\n";
            die "\n";
        }	
    } 
    else {
        if( system("/net/den/usr/perl5.8.8/bin/perl $ENV{AUTOBUILDBASE}/packaging/Voice/package.pl -a -v $pb_tag -p") ) {
            print LOG "\nFATAL : Failed creating patch package\n";
            close(LOG);
            print "Failed\n";
            print color('bold red')."\nFatal error : ".color('reset')."Failed creating patch package. Please remove the GIT tag $pb_tag manually from GITLAB\n";
            die "\n";
        }	
    }
}
else {
	print "Will this be a patch build ? [y/n]  ".color('reset');
	$ans = <STDIN>;
	if( !($ans =~ /^y/i) ) {
		system("echo package_builder -v $pb_tag >> $pb_path");
		system("echo \n >> $pb_path");
	}
	else {
		system("echo package_builder -v $pb_tag -p  >> $pb_path");
		system("echo \n >> $pb_path");
	}
	system ("chmod 777 $pb_path");
}

print LOG "Exit Success\n";
close(LOG);

if ( !$automation ) {
	print " A script file has been produced to help in running package_builder on the build machine\n";
}
print " $pb_path\n\n".color('reset');

exit 0;
